
from sympy import * 
import matplotlib.pyplot as plt 
bernoullis = [log(abs(bernoulli(i))) for i in range(2,100,2)] 
print(bernoullis) 
x = [i for i in range(2,100,2)] 
print(x)
plt.plot(x, bernoullis) 
plt.xlabel(' n ' ) 
plt.ylabel(' log(bn)') 


plt.show()
\end{python}
\newpage 
\section{Appendix B - Code used in Section 8}
\begin{python}

import numpy as np 
import math 
from sympy import * 
from scipy.integrate import quad 
import matplotlib.pyplot as plt 

def Differentiate(fn): 
    return fn.diff(x) 

# Using EM to approximate an integral using a sum 
def EMapproxintegral(fn, a, b, M):
    f0 = lambdify(x, fn, 'numpy') 
    sumterm = sum([f0(i) for i in range(a, b+1)])
    # Calculating the sum 
    endpointterm = 0.5*(f0(a) + f0(b)) 
    # Calculating the end point term 
    diffterm = 0 
    curdif = fn 
    # Calculating the derivative term 
    for i in range(1,M): 
        curdif = Differentiate(curdif) 
        curfn = lambdify(x, curdif, 'numpy') 
        diffterm += (bernoulli(i+1) / factorial(i+1)) * (curfn(b) - curfn(a)) 
    integralapprox = -endpointterm - diffterm + sumterm 
    return integralapprox 
# Using EM to approximate a sum using its integral 
def EMapproxsum(fn, a, b, M): 
    f0 = lambdify(x, fn, 'numpy') 
    integralterm, err = quad(f0, a, b) 
    # Calculate the integral
    endpointterm = 0.5*(f0(a) + f0(b)) 
    # Calculate the end point term 
    diffterm = 0 
    curdif = fn 
    # Calculate the derivative term  
    for i in range(1,M): 
        curdif = Differentiate(curdif) 
        print(curdif) 
        curfn = lambdify(x, curdif, 'numpy') 
        diffterm += (bernoulli(i+1) / factorial(i+1)) * (curfn(b) - curfn(a)) 
    sumapprox = integralterm + endpointterm + diffterm 
    return sumapprox 

bounds = [0,1] \#input the bounds of the sum/integral  
x = Symbol('x') 
fn = np.e**(-x**2) 
#input the function 
f0 = lambdify(x, fn, 'numpy') 
approxlst = [] 
I, err = quad(f0, bounds[0], bounds[1]) 
# Evaluate the real value of the integral 
for i in range(1,11): 
    currapprox = EMapproxintegral(fn, bounds[0], bounds[1], i) 
    approxlst.append(abs(I-currapprox)) 


plt.plot([i for i in range(1,11)], approxlst) 
plt.show() 
# plot the absolute error of the approximation 



bounds2 = [1,2] 
#input the bounds of the sum/integral  
fn2 = 1/x**2 
# input the function 
fn20 = lambdify(x, fn2, 'numpy') 
actval = sum([fn20(i) for i in range(bounds2[0], bounds2[1] + 1)]) 
# Evaluate the real value of the sum 
approxlst2 = [] 
vallst2 = [] 
for i in range(1,21): 
    currapprox = EMapproxsum(fn2, bounds2[0], bounds2[1], i) 
    vallst2.append(currapprox) 
    approxlst2.append(abs(currapprox - actval)) 


print(approxlst2[-1]) 
plt.plot([i for i in range(1,21)], approxlst2) 
plt.show()
# plot the absolute error of the approximation 
